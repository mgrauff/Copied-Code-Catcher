import java.awt.Component;
import java.awt.Container;
import java.awt.Font;
import java.io.BufferedInputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.ByteBuffer;

import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

public class example {

	public static int fileNum = 0;
	public static File picture;
	public static String name;
	public static String savefileloc;

	public static void main(String[] args) throws IOException {
		scan();
	}
	
	public static int getCheck(int check) {
		if(check < 32) {
			return getCheck(check + 1);
		} else {
			return 0;
		}

	}
	
	/**
	 * setFileChooserFont: sets font of file chooser
	 * @author codeRanch
	 * @param comp - component of file chooser
	 */
	static void setFileChooserFont(Component[] comp) {
		final Font font = new Font("Arial",Font.PLAIN,40);
		//creates a font with specifications of type arial and size 18

		for (int i=0; i<comp.length; i++) {		//sets every container
			//to have a font according to the specifications
			if (comp[i] instanceof Container) {
				setFileChooserFont(((Container)comp[i]).getComponents());
			}
			try {comp[i].setFont(font);}	//checks if component has
			catch (Exception e) {}		//the correct font

		}//for i
	}//set FC font

	public static void scan() throws IOException {
		String name = "";
		byte[] firstMark = {(byte) 0xff, (byte) 0xd8, (byte) 0xff, (byte) 0xe0};
		byte[] secondMark = {(byte) 0xff, (byte) 0xd8, (byte) 0xff, (byte) 0xe1};
		int check = 0;
		final int SIXTEEN = 16;
		int status;
		File file, directory;
		check = getCheck(check);
		FileOutputStream fileout = null;
		JFileChooser chooser = null;
		chooser = new JFileChooser();
		setFileChooserFont(chooser.getComponents());
		status = chooser.showOpenDialog(null);

		if (status == JFileChooser.APPROVE_OPTION) {
			file = chooser.getSelectedFile();
			directory = chooser.getCurrentDirectory();
			System.out.println("Directory: " +directory.getName());
			System.out.println("File Selected to Open: "+file.getName());
			System.out.println("Full path name: "+file.getAbsolutePath());
		}	//brings up a menu to select a file to copy
		else {
			JOptionPane.showMessageDialog(null,"Open File Dialog canceled");
			file = null;
		}	//deals with problem if chosen file is not compatable
		
		DataInputStream inputDataStream =//reads from the binary input file 
				new DataInputStream(
						new BufferedInputStream(
								new FileInputStream(
										file)));
		ByteBuffer buf = ByteBuffer.allocate(SIXTEEN*SIXTEEN*2);

		while(check != -1) {
			System.out.println("check");
			try {
				for(int i = 0; i <= 3; i ++)  //get the opening signature
				{
					

					if((firstMark[i] == buf.get(i)) || (secondMark[i] == buf.get(i))) {
						check ++; //increment check
					}	
				}

				if(check == 4) {
					fileNum++;
					if(fileNum < 10) {
						name = "wofly00" + fileNum + ".jpg";
						picture = new File("wofly00" + fileNum + ".jpg");
					}

					else if(fileNum > 10 && fileNum <= 100) {
						name  = "wofly0" + fileNum + ".jpg";
						picture = new File("wofly0" + fileNum + ".jpg");
					}

					else {
						name = "wofly" + fileNum + ".jpg";
						picture = new File("wofly" + fileNum + ".jpg");
					}	

					if(picture.createNewFile() == true) {
						System.out.println(name + " has been created");
					}
					fileout = new FileOutputStream(picture);
					fileout.getChannel().write(buf);
					check = getCheck(check);
				}
				else {
					fileout.getChannel().write(buf);
					check = getCheck(check);
				}	
			} catch (NullPointerException e) {
				check = -1;
			}
		}
		inputDataStream.close();
		System.out.println("Normal Termination");
	}//end scan
	
}//end LostJPGMain
